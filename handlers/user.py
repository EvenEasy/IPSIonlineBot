import markups, forms, create_bot
from create_bot import bot, db
from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from datetime import datetime

admins = (367961212,1835953916)

async def start(message : types.Message):
    await message.answer(
        """–í—ã —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç–µ—Å—å –Ω–∞ –∫—É—Ä—Å —É—á–µ–Ω–∏—á–µ—Å—Ç–≤–∞ IPSI, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ—Ö–æ–¥–∏—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ online (3 –º–µ—Å—è—Ü–∞ 3 –¥–Ω—è –≤ –Ω–µ–¥–µ–ª—é) –∏ offline (5 –º–µ—Å—è—Ü–µ–≤ —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ –±–∞–∑–∞—Ö —Å–ª—É–∂–µ–Ω–∏—è—Ö). 

–î–∞—Ç–∞ —Å—Ç–∞—Ä—Ç–∞ –∫—É—Ä—Å–∞ - 3 –ê–ø—Ä–µ–ª—è 2022 –≥–æ–¥–∞.

–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± –æ–Ω–ª–∞–π–Ω –∫—É—Ä—Å–µ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å —Ç—É—Ç:
https://ipsischool.com/

–î–ª—è –Ω–∞—á–∞–ª–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ —Å–±–æ—Ä –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–≤–æ–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –Ω–∞–∂–∞–≤ –≤–Ω–∏–∑—É –∫–Ω–æ–ø–∫—É ""–Ø –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é"" üëá""",
        reply_markup=markups.menu_markup
    )
    print('/start', message.from_user.id)

async def on_message(message : types.Message):
    await bot.send_message(
        367961212,
        f""" <b>User</b> : <b>{message.from_user.username}</b>
<b>User ID</b> : <i>{message.from_user.id}</i>
Message :
{message.text}
""", parse_mode='HTML', reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton('–û–¢–í–ï–¢–ò–¢–¨', callback_data=f'answer_{message.from_user.id}_{message.message_id}')]])
    )

# ===================== REGISTER ===================== #

async def i_approve(callback : types.CallbackQuery, state : FSMContext):
    
    try: await callback.answer()
    except Exception: pass
    
    if db.get_user_info(callback.from_user.id):
        return

    await forms.RegisterForms.registrate.set()
    questions = db.get_questions()
    await callback.message.answer(questions[0][0])
    await state.update_data(
        questions=questions,
        answers=[],
        step=0,
        content_type=questions[0][2]
    )

async def register(message : types.Message, state : FSMContext):
    data = await state.get_data()
    try:
        step = data.get('step',0)
        if message.content_type == data.get('content_type', 'TEXT').lower():
            data.get('answers', []).append(message.text if data.get('content_type') == 'TEXT' else message.contact.phone_number)
            await message.answer(
                data.get('questions')[step+1][0],
                reply_markup=markups.contact if data.get('questions')[step+1][2] == 'CONTACT' else None
            )
            
            await state.update_data(
                {
                    'step'            : step + 1,
                    'answers'         : data.get('answers', []),
                    'content_type'    : data.get('questions')[step+1][2],
                }
            )
        else:
            await message.answer(
                data.get('questions')[step][0],
                reply_markup=markups.contact if data.get('questions')[step][2] == 'CONTACT' else None
            )
    except IndexError:
        await state.finish()
        await message.answer("""–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞ üôå

*ONLINE –∫—É—Ä—Å* –Ω–∞—á–Ω–µ—Ç—Å—è 3 –ê–ø—Ä–µ–ª—è 2022 –≥–æ–¥–∞, –¥–µ—Ç–∞–ª–∏ –±—É–¥—É—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–∂–µ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª–µ.

–í—Å—Ç—É–ø–∞–π—Ç–µ –≤ –Ω–µ–≥–æ –ø–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Å—ã–ª–∫–µ:
(—Å—Å—ã–ª–∫–∞ –ø–æ–∫–∞ —á—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)

*OFFLINE –∫—É—Ä—Å* 
–ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∫—É—Ä–∞—Ç–æ—Ä –∏ —Å–æ–æ–±—â–∏—Ç –¥–µ—Ç–∞–ª–∏.

üëâ –ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –∞–∫–∫–∞—É–Ω—Ç @ipsischool.

–î–æ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ –ò–ü–°–ò üëã""", reply_markup=types.ReplyKeyboardRemove())
        
        db.insert_user_data(message.from_user.full_name, message.from_user.username, ', '.join(data.get('answers', [])), message.from_user.id)
        await create_bot.user_workspace.append_row([
            db.get_num,
            message.from_user.id,
            message.from_user.first_name,
            message.from_user.last_name,
            message.from_user.full_name,
            datetime.now().strftime('%d.%m.%Y - %H:%M'),
            *data.get('answers')
        ])

# ===================== REGISTER HANDLERS ===================== #

def register_handlers(dp : Dispatcher):
    dp.register_message_handler(start, commands=['start'])

    dp.register_message_handler(on_message, lambda i: db.get_user_info(i.from_user.id) and i.from_user.id not in admins)

    dp.register_callback_query_handler(i_approve, text='i_approve')
    dp.register_message_handler(register,content_types=[types.ContentType.TEXT,types.ContentType.CONTACT],state=forms.RegisterForms.registrate)